---
import PageLayout from '@layouts/PageLayout.astro';
import { remote_workflows as pipelines } from '@public/pipelines.json';
---

<PageLayout
    title="Pipeline health"
    subtitle="Check GitHub settings for all nf-core repositories"
    mainpage_container={false}
>
    <div class="container-fluid main-content w-100 mw-100">
        <div class="table-responsive">
            <h2>Pipelines</h2>
            <table class="table table-hover table-sm">
                <thead>
                    <tr>
                        <th class="small fw-normal text-nowrap">Pipeline Name</th>
                        <th class="small fw-normal text-nowrap" title="Has at least one release" data-bs-toggle="tooltip" data-bs-placement="top">Released</th>
                        <th class="small fw-normal text-nowrap" title="Last release is after latest tools release (so up to date with template)" data-bs-toggle="tooltip" data-bs-placement="top">Released after tools</th>
                        <th class="small fw-normal text-nowrap" title="Master branch is same commit as the last release" data-bs-toggle="tooltip" data-bs-placement="top">Master = release</th>
                        <th class="small fw-normal text-nowrap" title="Has a nextflow_schema.json file (in last release, dev if no release)" data-bs-toggle="tooltip" data-bs-placement="top">JSON Schema</th>
                        <th class="small fw-normal text-nowrap" title="Has a modules directory, suggesting that it's a DSL2 pipeline (in last release, dev if no release)" data-bs-toggle="tooltip" data-bs-placement="top">DSL2</th>
                        <th class="small fw-normal text-nowrap" title="Uses nf-test" data-bs-toggle="tooltip" data-bs-placement="top">nf-test</th>
                        <th class="small fw-normal text-nowrap" title="Uses nf-test in dev branch" data-bs-toggle="tooltip" data-bs-placement="top">nf-test in dev</th>
                        <th class="small fw-normal text-nowrap" title="Disable wikis" data-bs-toggle="tooltip" data-bs-placement="top">Wikis</th>
                        <th class="small fw-normal text-nowrap" title="Enable issues" data-bs-toggle="tooltip" data-bs-placement="top">Issues</th>
                        <th class="small fw-normal text-nowrap" title="Allow merge commits" data-bs-toggle="tooltip" data-bs-placement="top">Merge commits</th>
                        <th class="small fw-normal text-nowrap" title="Allow rebase merging" data-bs-toggle="tooltip" data-bs-placement="top">Rebase merging</th>
                        <th class="small fw-normal text-nowrap" title="Do not allow squash merges" data-bs-toggle="tooltip" data-bs-placement="top">Squash merges</th>
                        <th class="small fw-normal text-nowrap" title="default branch master (released) or dev (no releases)" data-bs-toggle="tooltip" data-bs-placement="top">Default branch</th>
                        <th class="small fw-normal text-nowrap" title="Minimum keywords set" data-bs-toggle="tooltip" data-bs-placement="top">Keywords</th>
                        <th class="small fw-normal text-nowrap" title="Description must be set" data-bs-toggle="tooltip" data-bs-placement="top">Description</th>
                        <th class="small fw-normal text-nowrap" title="URL should be set to https://nf-co.re/[PIPELINE-NAME]" data-bs-toggle="tooltip" data-bs-placement="top">Repo URL</th>
                        <th colspan="2" class="small fw-normal text-nowrap" title="Team access" data-bs-toggle="tooltip" data-bs-placement="top">Team access</th>
                        <th colspan="3" class="small fw-normal text-nowrap" title="Branches exist" data-bs-toggle="tooltip" data-bs-placement="top">Branches exist</th>
                        <th colspan="6" class="small fw-normal text-nowrap" title="Branch protection: master" data-bs-toggle="tooltip" data-bs-placement="top">Branch protection: master</th>
                        <th colspan="6" class="small fw-normal text-nowrap" title="Branch protection: dev" data-bs-toggle="tooltip" data-bs-placement="top">Branch protection: dev</th>
                        <th colspan="6" class="small fw-normal text-nowrap" title="Restrict push to TEMPLATE to @nf-core-bot" data-bs-toggle="tooltip" data-bs-placement="top">T push</th>
                    </tr>
                </thead>
                <tbody>
                    {
                        pipelines.map(pipeline =>
                            {
                                const getCell = (condition?: any, link?: string, tooltip?: string) =>
                                    <td class={"text-center " + (condition ? (condition === -1 ? 'status--unknown' : 'status--healthy') : 'status--unhealthy')}
                                        data-bs-toggle="tooltip" title={pipeline.name + ": " + tooltip}>
                                        {
                                            condition === -1 ?
                                                <a href={link} class="d-block text-secondary text-decoration-none">?</a> :
                                                <a href={link} target="_blank">
                                                    { condition ? <i class="fas fa-check text-success"></i> : <i class="fas fa-times text-danger"></i> }
                                                </a>
                                        }
                                    </td>
                                return <tr>
                                <td>{pipeline.name}</td>
                                <!-- Released -->
                                { getCell(!!pipeline.releases?.length, `https://github.com/nf-core/${pipeline.name}/releases`, "has at least one release") }
                                <!-- Released after tools -->
                                { <td class="text-center">ðŸš§</td> ?? getCell(-1, `https://github.com/nf-core/${pipeline.name}/releases`, "last release is after latest tools release (so up to date with template)") }
                                <!--Master = release -->
                                { getCell(pipeline.last_release_is_head, pipeline.last_release_vs_default_compare_url, "master branch is same commit as the last release") }
                                <!-- JSON Schema TODO: ðŸš§ add dev branch fallback-->
                                { getCell(pipeline.releases?.[0].has_schema, "null", "has a nextflow_schema.json file (in last release, dev if no release)") }
                                <!-- DSL2 TODO: ðŸš§ add dev branch fallback-->
                                { getCell(pipeline.is_DSL2, pipeline.repository_url, "has a modules directory, suggesting that it's a DSL2 pipeline (in last release, dev if no release)") }
                                <!-- nf-test -->
                                { getCell(pipeline.has_nf_test, pipeline.repository_url, "uses nf-test") }
                                <!-- nf-test in dev -->
                                { getCell(pipeline.has_nf_test_dev, pipeline.repository_url, "uses nf-test in dev branch") }
                                <!-- wikis -->
                                { getCell(!pipeline.has_wiki, pipeline.repository_url, "disable wiki") }
                                <!-- issues -->
                                { getCell(pipeline.has_issues, pipeline.repository_url+'/issues', "enable issues") }
                                <!-- merge commits -->
                                { <td class="text-center">ðŸš§</td> ?? getCell(-1, `https://github.com/nf-core/${pipeline.name}/releases`, "allow merge commits") }
                                <!-- Rebase merging -->
                                { <td class="text-center">ðŸš§</td> ?? getCell(-1, `https://github.com/nf-core/${pipeline.name}/releases`, "allow rebase merging") }
                                <!-- Squash changes -->
                                { <td class="text-center">ðŸš§</td> ?? getCell(-1, `https://github.com/nf-core/${pipeline.name}/releases`, "do not allow squash merge") }
                                <!-- Default branch TODO: ðŸš§-->
                                { getCell(pipeline.default_branch, pipeline.repository_url+'/commits', "default branch master (released) or dev (no releases)") }
                                <!-- Keywords -->
                                { <td class="text-center">ðŸš§</td> ?? getCell(-1, `https://github.com/nf-core/${pipeline.name}/releases`, "minimum keywords set") }
                                <!-- Description -->
                                { getCell(pipeline.description, pipeline.repository_url, "description must be set") }
                                <!-- Repo URL -->
                                { getCell(new RegExp(`https:\/\/nf-co\.re\/${pipeline.name}`).test(pipeline.homepage ?? ''), pipeline.homepage ?? pipeline.repository_url, "URL should be set to https://nf-co.re/[PIPELINE-NAME]") }
                                <!-- Team access -->
                                { <td class="text-center">ðŸš§</td> ?? getCell(-1, `https://github.com/nf-core/${pipeline.name}/releases`, "write access for nf-core/contributors") }
                                { <td class="text-center">ðŸš§</td> ?? getCell(-1, `https://github.com/nf-core/${pipeline.name}/releases`, "admin access for nf-core/core") }
                                <!-- Branches exist -->
                                { getCell(pipeline.main_branch_exists, `https://github.com/nf-core/${pipeline.name}/tree/${pipeline.default_branch}`, "master branch: branch must exist") }
                                { getCell(pipeline.dev_branch_exists, `https://github.com/nf-core/${pipeline.name}/tree/dev`, "dev branch: branch must exist") }
                                { getCell(pipeline.TEMPLATE_branch_exists, `https://github.com/nf-core/${pipeline.name}/tree/TEMPLATE`, "TEMPLATE branch: branch must exist") }
                                <!-- Branch protection: master -->
                                { getCell(!pipeline.main_branch_protection_up_to_date ? true : pipeline.main_branch_protection_up_to_date, pipeline.repository_url, "master branch: do not require branch to be up to date before merging") }
                                { getCell(pipeline.main_branch_protection_status_checks, pipeline.repository_url, "master branch: minimum set of CI tests must pass") }
                                { getCell(pipeline.main_branch_protection_require_non_stale_review, pipeline.repository_url, "master branch: reviews not marked stale after new commits") }
                                { getCell(pipeline.main_branch_protection_require_codeowner_review !== -1 ? !pipeline.main_branch_protection_require_codeowner_review : pipeline.main_branch_protection_require_codeowner_review, pipeline.repository_url, "master branch: code owner reviews not required") }
                                { getCell(pipeline.main_branch_protection_required_reviews !== -1 ? pipeline.main_branch_protection_required_reviews === 2 : pipeline.main_branch_protection_required_reviews, pipeline.repository_url, "master branch: 2 reviews required") }
                                { getCell(pipeline.main_branch_protection_enforce_admins !== -1 ? !pipeline.main_branch_protection_enforce_admins : pipeline.main_branch_protection_enforce_admins, pipeline.repository_url, "master branch: do not enforce rules for admins") }
                                <!-- Branch protection: dev -->
                                { getCell(!pipeline.dev_branch_protection_up_to_date ? true : pipeline.dev_branch_protection_up_to_date, pipeline.repository_url, "dev branch: do not require branch to be up to date before merging") }
                                { getCell(pipeline.dev_branch_protection_status_checks, pipeline.repository_url, "dev branch: minimum set of CI tests must pass") }
                                { getCell(pipeline.dev_branch_protection_require_non_stale_review, pipeline.repository_url, "dev branch: reviews not marked stale after new commits") }
                                { getCell(pipeline.dev_branch_protection_require_codeowner_review !== -1 ? !pipeline.dev_branch_protection_require_codeowner_review : pipeline.dev_branch_protection_require_codeowner_review, pipeline.repository_url, "dev branch: code owner reviews not required") }
                                { getCell(pipeline.dev_branch_protection_required_reviews !== -1 ? pipeline.dev_branch_protection_required_reviews === 2 : pipeline.dev_branch_protection_required_reviews, pipeline.repository_url, "dev branch: 2 reviews required") }
                                { getCell(pipeline.dev_branch_protection_enforce_admins !== -1 ? !pipeline.dev_branch_protection_enforce_admins : pipeline.dev_branch_protection_enforce_admins, pipeline.repository_url, "dev branch: do not enforce rules for admins") }
                                <!-- T push -->
                                { getCell(pipeline.TEMPLATE_restrict_push, pipeline.repository_url, "restrict push to TEMPLATE to @nf-core-bot") }
                            </tr>
                            }
                        )
                    }
                </tbody>
            </table>
        </div>
    </div>
    {
        false && (
        <div class="iframe-container w-100 d-flex align-items-start vh-100">
            <i class="mt-5 m-auto text-success fa-regular fa-spinner-third fa-spin fa-3x"></i>
            <iframe
                class="d-none"
                src="https://oldsite.nf-co.re/pipeline_health"
                onload="this.classList.remove('d-none'); this.previousElementSibling.classList.add('d-none');"
                title="pipeline_heath"
                style="border:none;"
                width="100%"
                height="100%"></iframe>
        </div>
        )
    }
    hello
</PageLayout>
<style>
    .status--healthy {
        background-color: #0f4b2b;
    }
    .status--unhealthy {
        background-color: #74261e;
    }
    .status--unknown {
        background-color: transparent;
    }
    th {
        padding: 0.25rem;
    }
    tr {
        border-bottom: 1px solid gray;
    }
</style>
