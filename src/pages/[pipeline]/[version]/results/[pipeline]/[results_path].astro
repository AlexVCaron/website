---
import ResultsLayout from '@layouts/ResultsLayout.astro';
import pipelines_json from '@public/pipelines.json';
import { S3Client, ListObjectsV2Command } from '@aws-sdk/client-s3';

export async function getStaticPaths() {
    let paths: {
        params: {
            pipeline: string;
            version: string;
            results_path: string;
        };
        props: {
            content: { Key: string; LastModified: Date; ETag: string; Size: number; StorageClass: string }[];
        };
    }[] = [];
    let client = new S3Client({
        region: 'eu-west-1',
        signer: { sign: async (request) => request },
    });
    const bucketName = 'nf-core-awsmegatests';
    const prefix = `/`;
    let bucketContents: { Key: string; LastModified: Date; ETag: string; Size: number; StorageClass: string }[] = [];
    let response;
    let isTruncated = true;
    while (isTruncated) {
        response = await client.send(
            new ListObjectsV2Command({
                Bucket: bucketName,
                ContinuationToken: response?.NextContinuationToken,
                // Prefix: prefix,
            })
        );
        if (response.KeyCount === 0) {
            break;
        }
        if (response.Contents) {
            // get only the directories and files until "results-.*\/"
            response.Contents = response.Contents.filter((item) => {
                return item.Key.split('/').length === 3;
            });
            bucketContents.push(...response.Contents);

            isTruncated = response.IsTruncated;
        }
    }
    pipelines_json.remote_workflows.forEach((pipeline) => {
        pipeline.releases
            .filter((rel) => rel.tag_name !== 'dev')
            .forEach((release) => {
                const results_path = 'results-' + release.sha;
                const version = release.tag_name;

                paths.push({
                    params: {
                        pipeline: pipeline.name,
                        version: version,
                        results_path: results_path,
                    },
                    props: {
                        content: bucketContents.filter((item) => {
                            return item.Key.startsWith(`${pipeline.name}/${version}/${results_path}/`);
                        }),
                    },
                });
            });
    });
    return paths;
}
const { pipeline, version, results_path } = Astro.params;
const { content } = Astro.props;
if (version === 'dev') {
    return Astro.redirect(`/${pipeline}/`);
}
---

<ResultsLayout {pipeline} {version} path={results_path} bucketContents={content} />
