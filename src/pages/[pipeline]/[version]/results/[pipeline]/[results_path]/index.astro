---
import ResultsLayout from '@layouts/ResultsLayout.astro';
import pipelines_json from '@public/pipelines.json';
import { S3Client, ListObjectsV2Command } from '@aws-sdk/client-s3';

export async function getStaticPaths() {
    let paths: {
        params: {
            pipeline: string;
            version: string;
            results_path: string;
        };
        props: {
            content: { Key: string; LastModified: Date; ETag: string; Size: number; StorageClass: string }[];
        };
    }[] = [];

    async function getKeysWithPrefixes(prefixes) {
        let client = new S3Client({
            region: 'eu-west-1',
            signer: { sign: async (request) => request },
        });
        const keys = [];
        const commonPrefixes = [];

        for (const prefix of prefixes) {
            let continuationToken = undefined;
            do {
                const command = new ListObjectsV2Command({
                    Bucket: 'nf-core-awsmegatests',
                    Prefix: prefix,
                    ContinuationToken: continuationToken,
                    Delimiter: '/',
                });
                try {
                    const response = await client.send(command);
                    if (response.Contents) {
                        for (const object of response.Contents) {
                            keys.push(object);
                        }
                    }
                    if (response.CommonPrefixes) {
                        for (const object of response.CommonPrefixes) {
                            commonPrefixes.push(object);
                        }
                    }

                    continuationToken = response.NextContinuationToken;
                } catch (error) {
                    console.error('Error retrieving keys:', error);
                    return [];
                }
            } while (continuationToken);
        }

        return { keys: keys, commonPrefixes: commonPrefixes };
    }

    const prefixes = pipelines_json.remote_workflows
        .map((pipeline) => {
            return pipeline.releases
                .filter((rel) => rel.tag_name !== 'dev')
                .map((release) => {
                    return `${pipeline.name}/results-${release.tag_sha}/`;
                });
        })
        .flat();
    const awsResponse = await getKeysWithPrefixes(prefixes);
    const commonPrefixes = awsResponse.commonPrefixes;
    const bucketContents = awsResponse.keys;
    pipelines_json.remote_workflows.forEach(async (pipeline) => {
        pipeline.releases
            .filter((rel) => rel.tag_name !== 'dev')
            .forEach(async (release) => {
                const results_path = 'results-' + release.tag_sha;
                const version = release.tag_name;
                paths.push({
                    params: {
                        pipeline: pipeline.name,
                        version: version,
                        results_path: results_path,
                    },
                    props: {
                        content: bucketContents.filter((item) => {
                            return item.Key.startsWith(`${pipeline.name}/${results_path}/`);
                        }),
                        commonPrefixes: commonPrefixes.filter((item) => {
                            return item.Prefix.startsWith(`${pipeline.name}/${results_path}/`);
                        }),
                    },
                });
            });
    });
    return paths;
}
const { pipeline, version, results_path } = Astro.params;
const { content, commonPrefixes } = Astro.props;
if (version === 'dev') {
    return Astro.redirect(`/${pipeline}/`);
}
---

<ResultsLayout {pipeline} {version} path={results_path} bucketContents={content} {commonPrefixes} />
