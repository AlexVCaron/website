---
import { markdown } from '@astropub/md';
import PipelineSidebar from '@components/pipeline/PipelineSidebar.astro';
import PipelinePageLayout from '@layouts/PipelinePageLayout.astro';
import pipelines_json from '@public/pipelines.json';
import cache from 'bin/cache.js';

export function getStaticPaths() {
    var paths: { params: { pipeline: string; version: string; md_file: string }; props: { versions; md_files } }[] = [];
    pipelines_json.remote_workflows.forEach((pipeline) => {
        pipeline.releases.forEach((release) => {
            const md_files = release.doc_files.map((file) => file.replace('docs/', '').replace('.md', ''));
            paths.push({
                params: {
                    pipeline: pipeline.name,
                    version: release.tag_name,
                },
                props: {
                    versions: pipeline.releases.map((release) => release.tag_name),
                    md_files: md_files,
                    meta: pipeline,
                },
            });
        });
    });
    return paths;
}
const { pipeline, version } = Astro.params;
const headings = [];
const description = pipelines_json.remote_workflows.filter((p) => p.name === pipeline).description;
const baseUrl = '/' + pipeline + '/' + version;

let { versions, md_files, meta } = Astro.props;
let tabItems = md_files.map((file: string) => {
    return {
        label: file.replace(/-/g, ' ').replace(/\w\S*/g, (txt: string) => {
            return txt.charAt(0).toUpperCase() + txt.substring(1).toLowerCase();
        }),
        href: baseUrl + '/' + file,
        active: false,
    };
});

const cache_key = `${pipeline}/${version}/README.md`;
const md_content = await cache
    .get(cache_key)
    .then((response) => {
        let content = response;
        return content;
    })
    .catch((error) => {
        console.log(error);
        return '';
    });
---

<PipelinePageLayout
    pipeline={pipeline}
    subtitle={description}
    headings={headings}
    version={version}
    versions={versions}
    tabItems={tabItems}
>
    <div class="row">
        <div class="col-12 col-md-9 pt-3">
            {
                async () => {
                    const html = await markdown(md_content); // Markdown component of md package is broken at the moment, using this workaround
                    return html;
                }
            }
        </div>
        <div class="col-12 col-md-3 toc order-first order-md-last">
            <PipelineSidebar {meta} {pipeline} {version} />
        </div>
    </div>
</PipelinePageLayout>

<style lang="scss">
    @import '@styles/_variables.scss';
    .nav-link {
        &:hover {
            border: 0;
            border-bottom: 2px solid $success;
        }
        &:focus {
            border: 0;
            border-bottom: 2px solid $success;
        }
    }

    .nav-link.active {
        border: 0;
        border-bottom: 2px solid $success;
    }
</style>
