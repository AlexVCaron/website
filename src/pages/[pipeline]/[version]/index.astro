---
import { markdown } from '@astropub/md';
import PipelinePageLayout from '@layouts/PipelinePageLayout.astro';
import pipelines_json from '@public/pipelines.json';
import cache from 'bin/cache.js';
import PipelineSidebar from '@components/pipeline/PipelineSidebar.astro';
export function getStaticPaths() {
    var paths: {
        params: { pipeline: string; version: string; md_file: string };
        props: { versions: string[]; md_files: string[]; meta: {} };
    }[] = [];
    pipelines_json.remote_workflows.forEach((pipeline) => {
        const releases = pipeline.releases;
        const extended_releases = [...releases, { tag_name: 'latest', doc_files: releases[0].doc_files }];
        console.log(extended_releases);
        extended_releases.forEach((release) => {
            const md_files = release.doc_files.map((file) =>
                file.replace('docs/', '').replace('.mdx', '').replace('.md', ''),
            );

            paths.push({
                params: {
                    pipeline: pipeline.name,
                    version: release.tag_name,
                },
                props: {
                    versions: releases.map((release) => release.tag_name),
                    md_files: md_files,
                    meta: pipeline,
                },
            });
        });
    });
    return paths;
}
let { pipeline, version } = Astro.params;
let headings: {
    depth: number;
    text: string;
    slug: string;
}[] = [];

let { versions, md_files, meta } = Astro.props;
if (version === 'latest') {
    return Astro.redirect(`/${pipeline}/${versions[0]}`);
}

const description = meta.description;

const cache_key = `${pipeline}/${version}/README.md`;
const md_content = await cache
    .get(cache_key)
    .then((response) => {
        let content = response;
        return content;
    })
    .catch((error) => {
        console.log(error);
        return '';
    });

const md_github_url = 'https://github.com/nf-core/' + pipeline + '/blob/' + version + '/README.md';
---

<PipelinePageLayout
    pipeline={pipeline}
    subtitle={description}
    headings={headings}
    version={version}
    versions={versions}
    tabItems={md_files}
    md_github_url={md_github_url}
>
    <div class="row">
        <div class="col-12 col-md-8 col-xxl-9 pt-3 markdown-content">
            {
                async () => {
                    const html = await markdown(md_content); // Markdown component of md package is broken at the moment, using this workaround
                    return html;
                }
            }
        </div>
        <div class="col-12 col-md-4 col-xxl-3 toc">
            <PipelineSidebar pipeline={pipeline} version={version} meta={meta} />
        </div>
    </div>
</PipelinePageLayout>

<style lang="scss">
    @import '@styles/_variables.scss';
    .nav-link {
        &:hover {
            border: 0;
            border-bottom: 2px solid $success;
        }
        &:focus {
            border: 0;
            border-bottom: 2px solid $success;
        }
    }

    .nav-link.active {
        border: 0;
        border-bottom: 2px solid $success;
    }
</style>
