---
import { Markdown } from '@astropub/md';
import MarkdownWrapper from '@components/markdown/MarkdownWrapper.svelte';
import SidebarToc from '@components/sidebar/SidebarToc.svelte';
import PipelinePageLayout from '@layouts/PipelinePageLayout.astro';
import pipelines_json from '@public/pipelines.json';
import octokit, { getGitHubFile } from '@components/octokit.js';

const { pipeline, md_file } = Astro.params;
const version = 'dev';
const meta = pipelines_json.remote_workflows.find(
    (wf) => wf.name === pipeline && wf.releases.flatMap((r) => r.tag_name).includes('dev')
);
const versions = meta?.releases.map((r) => r.tag_name);
const description = meta?.description;
const baseUrl = '/' + pipeline + '/' + version;

let doc_files = await octokit.rest.repos
    .getContent({
        owner: 'nf-core',
        repo: pipeline,
        path: 'docs',
        ref: 'dev',
    })
    .then((response) => {
        return response.data
            .filter((file) => {
                return file.name.includes('.md') && !file.name.includes('README');
            })
            .map((file) => {
                return file.path.replace('docs/', '').replace('.md', '');
            });
    });
let tabItems = doc_files.map((file) => {
    return {
        label: file.replace(/-/g, ' ').replace(/\w\S*/g, (txt) => {
            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        }),
        href: baseUrl + '/' + file,
        active: file === md_file,
    };
});
let headings = [];

const filePath = 'docs/' + md_file + '.md';
const md_content = await getGitHubFile(pipeline, filePath, 'dev').then((content) => {
    if (content === undefined) {
        console.log('could not find content for ' + pipeline + '/' + filePath);
        return '';
    }
    const text_content = content.replace(/```(.*?)```/gs, '');
    // get headings and their depth for table of contents
    headings = text_content.match(/^(#{1,6})\s(.*)$/gm).map((heading) => {
        const depth = heading.match(/^(#{1,6})/)[0].length;
        let text = heading.match(/^(#{1,6})\s(.*)$/)[2];
        // check if exactly two backticks are used to wrap text
        if (text.match(/`(.+?)`/g)) {
            text = text.replace(/`(.+?)`/g, '<code>$1</code>');
            const slug = text
                .replace(/<code>(.*?)<\/code>/g, '$1')
                .toLowerCase()
                .replace(/ /g, '-')
                .replace(/[^\w-]+/g, '');
            return { depth, text, slug };
        } else {
            const slug = text
                .toLowerCase()
                .replace(/ /g, '-')
                .replace(/[^\w-]+/g, '');
            return { depth, text, slug };
        }
    });
    return content;
});

const max_heading_depth = 2;
// filter out headings that are higher than max_heading_depth
headings = headings.filter((h) => h.depth <= max_heading_depth);

export const prerender = false;
---

<PipelinePageLayout
    pipeline={pipeline}
    subtitle={description}
    headings={headings}
    version={version}
    versions={versions}
    tabItems={tabItems}
    md_github_url={`https://github.com/nf-core/${pipeline}/blob/${version}/docs/${md_file}.md`}
>
    <div class="row">
        <div class="col-12 col-md-9 pt-3">
            <MarkdownWrapper client:load headings={headings}>
                <Markdown of={md_content} />
            </MarkdownWrapper>
        </div>
        <div class="col-12 col-md-3 toc">
            <SidebarToc headings={headings} client:idle />
        </div>
    </div>
</PipelinePageLayout>
