---
import PageLayout from '@layouts/PageLayout.astro';
import { getCollection, type CollectionEntry } from 'astro:content';
import type { SidebarEntry } from '@utils/types';

let docs = await getCollection('docs');
let tutorialDocs: CollectionEntry<'docs'>[] = [];
let usageDocs: CollectionEntry<'docs'>[] = [];
let checklistDocs: CollectionEntry<'docs'>[] = [];
let guidelineDocs: CollectionEntry<'docs'>[] = [];
import SidebarNav from '@components/sidebar/SidebarNav.astro';
let sections: SidebarEntry[] = [
    { type: 'group', label: 'Tutorials', href: '/docs/tutorials', entries: [], collapsed: true },
    { type: 'group', label: 'Usage', href: '/docs/usage', entries: [], collapsed: true },
    { type: 'group', label: 'Checklists', href: '/docs/checklists', entries: [], collapsed: true },
    { type: 'group', label: 'Guidelines', href: '/docs/guidelines', entries: [], collapsed: true },
];
// sort docs first depth, then by weight, then by title
const sortDocs = (a: CollectionEntry<'docs'>, b: CollectionEntry<'docs'>) => {
    if (a.slug.split('/').length < b.slug.split('/').length) {
        return 1;
    } else if (a.slug.split('/').length > b.slug.split('/').length) {
        return -1;
    } else {
        a.data.weight = a.data.weight || 100;
        b.data.weight = b.data.weight || 100;
        if (a.data.weight < b.data.weight) {
            return -1;
        } else if (a.data.weight > b.data.weight) {
            return 1;
        } else {
            if (a.data.title < b.data.title) {
                return -1;
            } else if (a.data.title > b.data.title) {
                return 1;
            } else {
                return 0;
            }
        }
    }
};

docs.map((doc) => {
    if (doc.slug.startsWith('tutorials/')) {
        tutorialDocs.push(doc);
    }
    if (doc.slug.startsWith('usage/')) {
        usageDocs.push(doc);
    }
    if (doc.slug.startsWith('checklists/')) {
        checklistDocs.push(doc);
    }
    if (doc.slug.startsWith('guidelines/')) {
        guidelineDocs.push(doc);
    }
});
tutorialDocs.sort(sortDocs);
usageDocs.sort(sortDocs);
checklistDocs.sort(sortDocs);
guidelineDocs.sort(sortDocs);
const addEntriesToSection = (sections, docs: CollectionEntry<'docs'>[]) => {
    const createLinkOrGroup = (part, path, isLastPart, weight) => {
        let entry: SidebarEntry = {
            label: part,
            href: '/docs/' + path,
            isCurrent: Astro.url.pathname.replace('.html', '') === '/docs/' + path,
            type: isLastPart ? 'link' : 'group',
        };
        if (isLastPart && weight) {
            entry.weight = weight;
        }

        if (entry.type === 'group') {
            entry.entries = [];
            entry.collapsed = true; // You can set this dynamically as well
        }

        return entry;
    };

    const docSlugs = docs.map((doc) => doc.slug);
    docSlugs.forEach((slug) => {
        const parts = slug.split('/');
        let currentLevel = sections;

        parts.forEach((part, i) => {
            part = part.replaceAll('_', ' ').replace(/(^)\S/g, (match) => match.toUpperCase());
            const existingEntry = currentLevel.find((entry) => entry.label === part);

            if (existingEntry && existingEntry.type === 'group') {
                currentLevel = existingEntry.entries;
            } else {
                const newEntry = createLinkOrGroup(
                    part,
                    slug,
                    i === parts.length - 1,
                    docs.find((doc) => doc.slug === slug)?.data.weight,
                );
                currentLevel.push(newEntry);

                if (newEntry.type === 'group' && newEntry.entries) {
                    currentLevel = newEntry.entries;
                }
            }
        });
    });
};

addEntriesToSection(sections, docs);
// sort all entries by weight if available recursively
const sortEntries = (entries: SidebarEntry[]) => {
    entries.sort((a, b) => {
        if (a.weight && !b.weight) {
            return -1;
        } else if (!a.weight && b.weight) {
            return 1;
        } else if (a.weight && b.weight) {
            if (a.weight < b.weight) {
                return -1;
            } else if (a.weight > b.weight) {
                return 1;
            }
        } else {
            if (a.label < b.label) {
                return -1;
            } else if (a.label > b.label) {
                return 1;
            } else {
                return 0;
            }
        }
    });
    entries.forEach((entry) => {
        if (entry.type === 'group' && entry.entries) {
            sortEntries(entry.entries);
        }
    });
};

sections.forEach((section) => {
    sortEntries(section.entries);
});
---

<PageLayout
    title="Docs"
    subtitle="How to use nf-core pipelines and contribute to the nf-core community"
    mainpage_container={false}
>
    <div class="container-fluid main-content">
        <div class="row">
            <div class="col-12 col-md-3 sticky-top-under d-none d-md-inline sidebar-left">
                <SidebarNav items={sections} />
            </div>

            <div class="col-12 col-md-9">
                <p>
                    Here you can find all documentation on how to use nf-core pipelines, and nf-core tools to start
                    processing your data. You will also find information on how to contribute to nf-core pipelines,
                    modules and subworkflows.
                </p>
                <div class="row row-cols-1 row-cols-md-2 row-cols-xxl-4 justify-content-around">
                    <div class="col">
                        <h2>Tutorials</h2>
                        <ul>
                            {
                                tutorialDocs
                                    .filter((doc) => doc.slug.split('/').length === 2)
                                    .map((doc) => {
                                        // check if this is a parent of a nested doc
                                        const childDocs = tutorialDocs.filter((childDoc) =>
                                            childDoc.slug.startsWith(doc.slug),
                                        );
                                        if (childDocs.length > 0) {
                                            return (
                                                <li>
                                                    <span>
                                                        <a href={'/docs/' + doc.slug}>{doc.data.title}</a>
                                                        <button
                                                            class="btn p-0"
                                                            data-bs-toggle="collapse"
                                                            data-bs-target={'#' + doc.slug.replace('/', '-')}
                                                            aria-expanded="false"
                                                            aria-controls={doc.slug.replace('/', '-')}
                                                        >
                                                            <i class="fa-solid fa-chevron-down" />
                                                        </button>
                                                    </span>
                                                    <ul class="collapse" id={doc.slug.replace('/', '-')}>
                                                        {childDocs.map((childDoc) => {
                                                            return (
                                                                <li>
                                                                    <a href={'/docs/' + childDoc.slug}>
                                                                        {childDoc.data.title}
                                                                    </a>
                                                                </li>
                                                            );
                                                        })}
                                                    </ul>
                                                </li>
                                            );
                                        } else {
                                            return (
                                                <li>
                                                    <a href={'/docs/' + doc.slug}>{doc.data.title}</a>
                                                </li>
                                            );
                                        }
                                    })
                            }
                        </ul>
                    </div>

                    <div class="col">
                        <h2>Usage</h2>
                        <ul>
                            {
                                usageDocs
                                    .filter((doc) => doc.slug.split('/').length === 2)
                                    .map((doc) => {
                                        // check if this is a parent of a nested doc
                                        const childDocs = usageDocs.filter((childDoc) =>
                                            childDoc.slug.startsWith(doc.slug),
                                        );
                                        if (childDocs.length > 0) {
                                            return (
                                                <li>
                                                    <span>
                                                        <a href={'/docs/' + doc.slug}>{doc.data.title}</a>
                                                        <button
                                                            class="btn p-0"
                                                            data-bs-toggle="collapse"
                                                            data-bs-target={'#' + doc.slug.replace('/', '-')}
                                                            aria-expanded="false"
                                                            aria-controls={doc.slug.replace('/', '-')}
                                                        >
                                                            <i class="fa-solid fa-chevron-down" />
                                                        </button>
                                                    </span>
                                                    <ul class="collapse" id={doc.slug.replace('/', '-')}>
                                                        {childDocs.map((childDoc) => {
                                                            return (
                                                                <li>
                                                                    <a href={'/docs/' + childDoc.slug}>
                                                                        {childDoc.data.title}
                                                                    </a>
                                                                </li>
                                                            );
                                                        })}
                                                    </ul>
                                                </li>
                                            );
                                        } else {
                                            return (
                                                <li>
                                                    <a href={'/docs/' + doc.slug}>{doc.data.title}</a>
                                                </li>
                                            );
                                        }
                                    })
                            }
                        </ul>
                    </div>

                    <div class="col">
                        <h2>Checklists</h2>
                        <ul>
                            {
                                checklistDocs
                                    .filter((doc) => doc.slug.split('/').length === 2)
                                    .map((doc) => {
                                        // check if this is a parent of a nested doc
                                        const childDocs = checklistDocs.filter((childDoc) =>
                                            childDoc.slug.startsWith(doc.slug),
                                        );
                                        if (childDocs.length > 0) {
                                            return (
                                                <li>
                                                    <span>
                                                        <a href={'/docs/' + doc.slug}>{doc.data.title}</a>
                                                        <button
                                                            class="btn p-0"
                                                            data-bs-toggle="collapse"
                                                            data-bs-target={'#' + doc.slug.replace('/', '-')}
                                                            aria-expanded="false"
                                                            aria-controls={doc.slug.replace('/', '-')}
                                                        >
                                                            <i class="fa-solid fa-chevron-down" />
                                                        </button>
                                                    </span>
                                                    <ul class="collapse" id={doc.slug.replace('/', '-')}>
                                                        {childDocs.map((childDoc) => {
                                                            return (
                                                                <li>
                                                                    <a href={'/docs/' + childDoc.slug}>
                                                                        {childDoc.data.title}
                                                                    </a>
                                                                </li>
                                                            );
                                                        })}
                                                    </ul>
                                                </li>
                                            );
                                        } else {
                                            return (
                                                <li>
                                                    <a href={'/docs/' + doc.slug}>{doc.data.title}</a>
                                                </li>
                                            );
                                        }
                                    })
                            }
                        </ul>
                    </div>

                    <div class="col">
                        <h2>Guidelines</h2>
                        <ul>
                            {
                                guidelineDocs
                                    .filter((doc) => doc.slug.split('/').length === 2)
                                    .map((doc) => {
                                        // check if this is a parent of a nested doc
                                        const childDocs = guidelineDocs.filter((childDoc) =>
                                            childDoc.slug.startsWith(doc.slug),
                                        );
                                        if (childDocs.length > 0) {
                                            return (
                                                <li>
                                                    <span>
                                                        <a href={'/docs/' + doc.slug}>{doc.data.title}</a>
                                                        <button
                                                            class="btn p-0"
                                                            data-bs-toggle="collapse"
                                                            data-bs-target={'#' + doc.slug.replace('/', '-')}
                                                            aria-expanded="false"
                                                            aria-controls={doc.slug.replace('/', '-')}
                                                        >
                                                            <i class="fa-solid fa-chevron-down" />
                                                        </button>
                                                    </span>
                                                    <ul class="collapse" id={doc.slug.replace('/', '-')}>
                                                        {childDocs.map((childDoc) => {
                                                            return (
                                                                <li>
                                                                    <a href={'/docs/' + childDoc.slug}>
                                                                        {childDoc.data.title}
                                                                    </a>
                                                                </li>
                                                            );
                                                        })}
                                                    </ul>
                                                </li>
                                            );
                                        } else {
                                            return (
                                                <li>
                                                    <a href={'/docs/' + doc.slug}>{doc.data.title}</a>
                                                </li>
                                            );
                                        }
                                    })
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</PageLayout>
<style>
    .btn[aria-expanded='true'] {
        transform: rotate(180deg);
    }
</style>
