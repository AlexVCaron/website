---
import PageLayout from '@layouts/PageLayout.astro';
import { getCollection, type CollectionEntry } from 'astro:content';
import type { SidebarEntry } from '@utils/types';
import { addEntriesToSection } from '@utils/functions';

let docs = await getCollection('docs');
import SidebarNav from '@components/sidebar/SidebarNav.astro';
let sections: SidebarEntry[] = [
    { type: 'group', label: 'Tutorials', href: '/docs/tutorials', entries: [], collapsed: true },
    { type: 'group', label: 'Usage', href: '/docs/usage', entries: [], collapsed: true },
    { type: 'group', label: 'Contributing', href: '/docs/contributing', entries: [], collapsed: true },
    { type: 'group', label: 'Nf-core-tools', href: '/docs/nf-core-tools', entries: [], collapsed: true },
    { type: 'group', label: 'Checklists', href: '/docs/checklists', entries: [], collapsed: true },
    { type: 'group', label: 'Guidelines', href: '/docs/guidelines', entries: [], collapsed: true },
];

addEntriesToSection(sections, docs, Astro.url.pathname);
// sort all entries by weight if available recursively
const sortEntries = (entries: SidebarEntry[]) => {
    entries.sort((a, b) => {
        if (a.weight && !b.weight) {
            return -1;
        } else if (!a.weight && b.weight) {
            return 1;
        } else if (a.weight && b.weight && a.weight !== b.weight) {
            if (a.weight < b.weight) {
                return -1;
            } else if (a.weight > b.weight) {
                return 1;
            }
        } else {
            return a.label.localeCompare(b.label);
        }
    });
    entries.forEach((entry) => {
        if (entry.type === 'group' && entry.entries) {
            sortEntries(entry.entries);
        }
    });
};

sections.forEach((section) => {
    sortEntries(section.entries);
});

console.log('sections.entries', sections[3].entries);
---

<PageLayout
    title="Docs"
    subtitle="How to use nf-core pipelines and contribute to the nf-core community"
    mainpage_container={false}
>
    <div class="container-fluid main-content">
        <div class="row">
            <div class="col-12 col-md-3 sticky-top-under d-none d-md-inline sidebar-left">
                <SidebarNav items={sections} />
            </div>

            <div class="col-12 col-md-9">
                <p>
                    Here you can find all documentation on how to use nf-core pipelines, and nf-core tools to start
                    processing your data. You will also find information on how to contribute to nf-core pipelines,
                    modules and subworkflows.
                </p>
                <div class="grid">
                    {
                        sections &&
                            sections.map((section) => (
                                <div class="g-col-12 g-col-md-6 g-col-lg-4 g-col-xxl-3 card">
                                    <span class="card-header">
                                        <a href={section.href} class="text-decoration-none">
                                            {section.label}
                                        </a>
                                        <button class="btn p-0">
                                            <i class="fa-solid fa-chevron-down" />
                                        </button>
                                    </span>
                                    <ul class="card-body mx-3 mb-0" id={section.label?.replace('/', '-')}>
                                        {section.entries?.map((entry) => {
                                            if (entry.type === 'link') {
                                                return (
                                                    <li>
                                                        <a href={entry.href}>{entry.label}</a>
                                                    </li>
                                                );
                                            } else {
                                                return (
                                                    <li>
                                                        <a href={entry.href}>{entry.label}</a>
                                                        {entry.entries && (
                                                            <ul>
                                                                {entry.entries.map((subentry) => (
                                                                    <li>
                                                                        <a href={subentry.href}>{subentry.label}</a>
                                                                    </li>
                                                                ))}
                                                            </ul>
                                                        )}
                                                    </li>
                                                );
                                            }
                                        })}
                                    </ul>
                                </div>
                            ))
                    }
                </div>
            </div>
        </div>
    </div>
</PageLayout>
<style>
    .btn[aria-expanded='true'] {
        transform: rotate(180deg);
    }
</style>
