---
import PageLayout from '@layouts/PageLayout.astro';
import { getCollection } from 'astro:content';
import type { SidebarEntry } from '@utils/types';
import { addEntriesToSection, sanitizeNfCoreLabels } from '@utils/functions';
import HomepageCard from '@components/homepage/HomepageCard.astro';

let docs = await getCollection('docs');
import SidebarNav from '@components/sidebar/SidebarNav.astro';
let sections: SidebarEntry[] = [
    { type: 'group', label: 'Usage', href: '/docs/usage', entries: [], collapsed: false },
    { type: 'group', label: 'Contributing', href: '/docs/contributing', entries: [], collapsed: false },
    { type: 'group', label: 'Tutorials', href: '/docs/tutorials', entries: [], collapsed: false },
    { type: 'group', label: 'Guidelines', href: '/docs/guidelines', entries: [], collapsed: false },
    { type: 'group', label: 'Checklists', href: '/docs/checklists', entries: [], collapsed: false },
    { type: 'group', label: 'nf-core/tools', href: '/docs/nf-core-tools', entries: [], collapsed: false },
];

addEntriesToSection(sections, docs, Astro.url.pathname);
// sort all entries by weight if available recursively
const sortEntries = (entries: SidebarEntry[]) => {
    entries.sort((a, b) => {
        if (a.weight && !b.weight) {
            return -1;
        } else if (!a.weight && b.weight) {
            return 1;
        } else if (a.weight && b.weight && a.weight !== b.weight) {
            if (a.weight < b.weight) {
                return -1;
            } else if (a.weight > b.weight) {
                return 1;
            }
        } else {
            return a.label.localeCompare(b.label);
        }
    });
    entries.forEach((entry) => {
        if (entry.type === 'group' && entry.entries) {
            sortEntries(entry.entries);
        }
    });
};

sections.forEach((section) => {
    sortEntries(section.entries);
});

const findEntriesWithLabel = (sections: SidebarEntry[], label: string, parentLabel: string | undefined) => {
    let entries = [];
    sections.forEach((section) => {
        if (!parentLabel && section.label === label) {
            section.metadata = docs.find((doc) => '/docs/' + doc.slug === section.href);
            entries.push(section);
        }
        if (parentLabel && section.label === parentLabel) {
            section.entries.forEach((entry) => {
                if (entry.label === label) {
                    entry.metadata = docs.find((doc) => '/docs/' + doc.slug === entry.href);
                    entries.push(entry);
                }
            });
        }
        if (section.entries) {
            entries.push(...findEntriesWithLabel(section.entries, label, parentLabel));
        }
    });
    return entries;
};

let highlightSections = [];
['Introduction', 'Adding modules to pipelines', 'Assertions', 'nf-core-tools/Installation'].forEach((label) => {
    let parentLabel = label.includes('/') ? label.split('/')[0] : undefined;
    label = parentLabel ? label.split('/')[1] : label;
    let entries = findEntriesWithLabel(sections, label, parentLabel?.replace('nf-core-tools', 'nf-core/tools'));
    if (entries.length === 0) {
        console.error(`No entry found for label: ${label}`);
    }
    highlightSections.push(entries);
});
highlightSections = highlightSections.flat();
---

<PageLayout
    title="Docs"
    subtitle="How to use nf-core pipelines and contribute to the nf-core community"
    mainpage_container={false}
>
    <div class="container-fluid main-content">
        <div class="row">
            <div class="col-12 col-md-3 sticky-top-under d-none d-md-inline sidebar-left">
                <SidebarNav items={sections} />
            </div>

            <div class="col-12 col-md-8">
                <div class="grid">
                    {
                        highlightSections &&
                            highlightSections.map((section, i) => (
                                <>
                                    {i % 2 !== 0 && <div class="d-none d-md-block g-col-md-4" />}
                                    <div class="g-col-12 g-col-md-8 card position-relative">
                                        <div class="card-body">
                                            <a href={section.href} class="h4 stretched-link text-decoration-none">
                                                {section.metadata.data.title}
                                            </a>
                                            <div class="card-text">{section.metadata.data.subtitle}</div>
                                        </div>
                                    </div>
                                    {i % 2 === 0 && <div class="d-none d-md-block g-col-md-4" />}
                                </>
                            ))
                    }
                    {
                        sections &&
                            sections.map((section) => (
                                <div class="g-col-12 g-col-md-6 g-col-lg-4 g-col-xxxxl-2 card">
                                    <span class="card-header">
                                        <a href={section.href} class="text-decoration-none">
                                            {sanitizeNfCoreLabels(section.label)}
                                        </a>
                                    </span>
                                    <ul class="card-body mx-3 mb-0 list-unstyled" id={section.label?.replace('/', '-')}>
                                        {section.entries?.map((entry) => {
                                            if (entry.type === 'link') {
                                                return (
                                                    <li>
                                                        <a href={entry.href}>{sanitizeNfCoreLabels(entry.label)}</a>
                                                    </li>
                                                );
                                            } else {
                                                return (
                                                    <li>
                                                        {entry.href && (
                                                            <a href={entry.href} class="fw-semibold">
                                                                {sanitizeNfCoreLabels(entry.label)}
                                                            </a>
                                                        )}
                                                        {!entry.href && (
                                                            <span class="fw-semibold">
                                                                {sanitizeNfCoreLabels(entry.label)}
                                                            </span>
                                                        )}
                                                        {entry.entries && (
                                                            <ul class="list-unstyled">
                                                                {entry.entries.map((subentry) => (
                                                                    <li class="">
                                                                        <a
                                                                            href={subentry.href}
                                                                            set:html={sanitizeNfCoreLabels(
                                                                                subentry.label,
                                                                            )}
                                                                        />
                                                                    </li>
                                                                ))}
                                                            </ul>
                                                        )}
                                                    </li>
                                                );
                                            }
                                        })}
                                    </ul>
                                </div>
                            ))
                    }
                </div>
            </div>
        </div>
    </div>
</PageLayout>
<style>
    li a {
        text-decoration: none;

        &:hover {
            text-decoration: underline;
        }
    }
    .list-unstyled li {
        padding-left: 1rem;
    }
    .card.position-relative:hover {
        border-color: var(--bs-secondary-color);
        & a {
            text-decoration: underline !important;
        }
    }
</style>
