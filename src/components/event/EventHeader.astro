---
import ExportEventButton from '@components/event/ExportEventButton.svelte';
import LocalDateTime from '@components/event/LocalDateTime.svelte';

const { frontmatter } = Astro.props;

if (frontmatter.start === undefined) {
    frontmatter.start = new Date(frontmatter.startDate + 'T' + frontmatter.startTime);
}
if (frontmatter.end === undefined) {
    frontmatter.end = new Date(frontmatter.endDate + 'T' + frontmatter.endTime);
}
const start = frontmatter.start;
const end = frontmatter.end;
const locations = frontmatter.locations || [];

function getLinkIcon(link) {
    if (/^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.?be)\/.+$/gi.test(link)) {
        return 'fa-youtube';
    } else if (/^(https?:\/\/)?(www\.)?zoom\.us\/.+$/gi.test(link)) {
        return 'fa-zoom-us';
    } else if (/^(https?:\/\/)?(www\.)?bilibili\.com\/.+$/gi.test(link)) {
        return 'fa-bilibili';
    } else if (/^(https?:\/\/)?(www\.)?github\.com\/.+$/gi.test(link)) {
        return 'fa-github';
    } else if (/^(https?:\/\/)?(www\.)?linkedin\.com\/.+$/gi.test(link)) {
        return 'fa-linkedin';
    } else if (/^(https?:\/\/)?(www\.)?twitter\.com\/.+$/gi.test(link)) {
        return 'fa-twitter';
    } else if (/^(https?:\/\/)?(www\.)?(docs\.google\.com)\/.+$/gi.test(link)) {
        return 'fa-google-drive';
    }
}
---

<div class="">
    <div class="row row-cols-1 row-cols-md-2">
        <div class="col">
            <dl>
                <dt>Event start:</dt>
                <dd><LocalDateTime date={start} client:visible /></dd>
                <dt>Event end:</dt>
                <dd><LocalDateTime date={end} client:visible /></dd>
            </dl>
        </div>
        <div class="col">
            <dl>
                <dt>Locations:</dt>
                <dd>
                    <ul class="list-unstyled">
                        {
                            locations.map((location) => {
                                const locationURLs = Array.isArray(location.locationURL) ? location.locationURL : [location.locationURL];
                                return (
                                    <li class="list-item">
                                        <ul>
                                            <li>
                                                <strong>
                                                    {location.locationName}{location.locationLatLng && (
                                                        <a
                                                            class="m-1 btn btn-sm btn-outline-light"
                                                            href={`https://www.openstreetmap.org/?mlat=${location.locationLatLng[0]}&mlon=${location.locationLatLng[1]}&zoom=16#map=16/${location.locationLatLng[0]}/${location.locationLatLng[1]}`}
                                                            target="_blank"
                                                        >
                                                            <i class="fa-duotone fa-map-pin me-1" />
                                                            See on map
                                                        </a>
                                                    )}:
                                                </strong>
                                                <ul class="list-unstyled">
                                                    <li>
                                                        {locationURLs && (
                                                            <ul>
                                                                {locationURLs.map((loc) => {
                                                                    return (
                                                                        <li class="list-item">
                                                                            <a class="text-white underline" href={loc}>
                                                                                {loc}
                                                                            </a>
                                                                        </li>
                                                                    );
                                                                })}
                                                            </ul>
                                                        )}
                                                    </li>
                                                </ul>
                                            </li>
                                        </ul>
                                    </li>
                                );
                            })
                        }
                    </ul>
                </dd>

                {frontmatter.links && frontmatter.links.length > 0 && (
                    <>
                        <dt>Links:</dt>
                        <dd>
                            <ul>
                                {frontmatter.links.map((link) => {
                                    const iconClass = getLinkIcon(link);
                                    return (
                                        <li class="list-item">
                                            {iconClass && <i class={'fab ' + iconClass} />}
                                            <a class="text-white underline" href={link}>
                                                {link}
                                            </a>
                                        </li>
                                    );
                                })}
                            </ul>
                        </dd>
                    </>
                )}
            </dl>
        </div>
    </div>

    <div class="d-flex justify-content-center justify-content-md-start">
        <ExportEventButton frontmatter={frontmatter} add_class="btn-outline-light col" client:idle />
    </div>
</div>
<style lang="scss">
    .dropdown-menu {
        z-index: 100;
    }
</style>
