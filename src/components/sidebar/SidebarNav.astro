---
import { getCollection, CollectionEntry } from 'astro:content';

let docs = await getCollection('docs');
let usageDocs: CollectionEntry<'docs'>[] = [];
let developmentDocs: CollectionEntry<'docs'>[] = [];

docs = docs.filter((doc) => {
    return doc.slug.split('/').length === 2;
});
docs.map((doc) => {
    if (doc.slug.startsWith('usage/')) {
        usageDocs.push(doc);
    }
    if (doc.slug.startsWith('development/')) {
        developmentDocs.push(doc);
    }
});

const url = Astro.url.pathname.endsWith('/') ? Astro.url.pathname.slice(0, -1) : Astro.url.pathname;
---

<div class="nav">
    <div class="w-100 sticky-top-under">
        <h6 class="my-2 text-body">Usage</h6>
        <ul class="list-unstyled">
            {
                usageDocs &&
                    usageDocs.map((doc) => {
                        return (
                            <li
                                class:list={[
                                    'mt-2 w-100',
                                    {
                                        active: url === '/docs/' + doc.slug,
                                    },
                                ]}
                            >
                                <a
                                    class:list={[
                                        'text-decoration-none p-1',
                                        {
                                            'text-body-secondary': url !== '/docs/' + doc.slug,
                                        },
                                    ]}
                                    href={'/docs/' + doc.slug}
                                >
                                    {doc.data.title}
                                </a>
                            </li>
                        );
                    })
            }
        </ul>
        <h6 class="my-2 text-body">Contributing</h6>
        <ul class="list-unstyled">
            {
                developmentDocs &&
                    developmentDocs.map((doc) => {
                        return (
                            <li
                                class:list={[
                                    'mt-2 w-100',
                                    {
                                        active: Astro.url.pathname === '/docs/' + doc.slug,
                                    },
                                ]}
                            >
                                <a
                                    class:list={[
                                        'text-decoration-none p-1',
                                        {
                                            'text-body-secondary': Astro.url.pathname !== '/docs/' + doc.slug,
                                        },
                                    ]}
                                    href={'/docs/' + doc.slug}
                                >
                                    {doc.data.title}
                                </a>
                            </li>
                        );
                    })
            }
        </ul>
    </div>
</div>

<style lang="scss">
    @import 'src/styles/_variables.scss';

    li {
        font-size: 0.9rem;
    }

    li.active {
        background-color: transparentize($success, 0.75);
        a {
            color: $green-800 !important;
        }
    }

    :global([data-bs-theme='dark']) {
        li.active {
            background-color: transparentize($success-dark, 0.35);
            & a {
                color: $gray-200 !important;
            }
        }
    }
</style>
