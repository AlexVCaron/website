---
// Heavily inspired by Astro Starlight

import { type SidebarEntry } from '@utils/types';

export interface Props {
    items: SidebarEntry[];
    nested?: boolean;
}

let { items, nested } = Astro.props;

function flattenSidebar(sidebar: SidebarEntry[]): SidebarEntry[] {
    return sidebar.flatMap((entry) => (entry.type === 'group' ? flattenSidebar(entry.entries) : entry));
}
---

<ul class:list={[{ 'top-level': !nested }]}>
    {
        items.map((item) => (
            <li>
                {item.type === 'link' ? (
                    <a href={item.href} aria-current={item.isCurrent && 'page'} class:list={[{ h6: !nested }, 'px-2']}>
                        <span>{item.label}</span>
                    </a>
                ) : (
                    <details
                        open={
                            flattenSidebar(item.entries).some((i) => i.type === 'link' && i.isCurrent) ||
                            !item.collapsed
                        }
                    >
                        <summary>
                            <div class="group-label">
                                <span class="h5 text-reset">{item.label}</span>
                            </div>
                            <i class="fa-solid fa-chevron-right fa-xs mx-2 caret" />
                        </summary>
                        <Astro.self items={item.entries} nested />
                    </details>
                )}
            </li>
        ))
    }
</ul>
<style lang="scss">
    @import '@styles/_variables.scss';

    ul {
        --sl-sidebar-item-padding-inline: 0.5rem;
        list-style: none;
        padding: 0;
    }

    li {
        overflow-wrap: anywhere;

        a {
            display: block;
            text-decoration: none;
            color: var(--sl-color-gray-2);
            padding: 0.3em var(--sl-sidebar-item-padding-inline);

            &[aria-current='page'],
            &[aria-current='page']:hover,
            &[aria-current='page']:focus {
                color: var(--bs-success);
                background-color: transparentize($success, 0.75);
                border-inline-end: 2pt solid var(--bs-success);
            }
        }
        a,
        summary {
            border-inline-end: 2pt solid var(--bs-border-color);
            line-height: 1.4;
        }
    }

    ul ul li {
        margin-inline-start: var(--sl-sidebar-item-padding-inline);
        border-inline-start: 1pt solid var(--bs-border-color);
        padding-inline-start: var(--sl-sidebar-item-padding-inline);
    }

    .top-level > li + li {
        summary {
            padding-top: 0.75rem;
        }
    }

    summary {
        display: flex;
        align-items: center;
        justify-content: space-between;
        cursor: pointer;
        user-select: none;
        padding: 0.2em var(--sl-sidebar-item-padding-inline);
    }
    summary::marker,
    summary::-webkit-details-marker {
        display: none;
    }

    .caret {
        transition: transform 0.1s ease-in-out;
        flex-shrink: 0;
    }
    [open] > summary .caret {
        transform: rotateZ(90deg);
    }

    a > *:not(:last-child),
    .group-label > *:not(:last-child) {
        margin-inline-end: 0.25em;
    }
</style>
