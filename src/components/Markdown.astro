---
import octokit from './octokit.js';
import { marked } from 'marked';
import emoji from 'node-emoji';
const { content, gh_url } = Astro.props;

const res = await octokit.rest.emojis.get();
const emojis = Object.keys(res.data);
const onMissing = (name) => {
    if (emojis.includes(name)) {
        return `<img class src="${res.data[name]}" alt="${name}" />`;
    } else {
        return name;
    }
};

const emojifi = {
    name: 'emoji',
    level: 'inline', // This is an inline-level tokenizer
    start(src) {
        return src.indexOf(':');
    }, // Hint to Marked.js to stop and check for a match
    tokenizer(src, tokens) {
        const rule = /^:(\w+):/; // Regex for the complete token, anchor to string start
        const match = rule.exec(src);
        if (match) {
            return {
                // Token to generate
                type: 'emoji', // Should match "name" above
                raw: match[0], // Text to consume from the source
                emoji: match[1], // Additional custom properties
            };
        }
    },
    renderer(token) {
        return `<span class="emoji">${emoji.emojify(token.raw, onMissing)}</span>`;
    },
};
marked.use({ extensions: [emojifi] });
marked.setOptions({
    baseUrl: Astro.url.pathname + '/',
});
const parsedContent = marked.parse(content).replace(/<a href="(.*?)(.md)"/g, '<a href="$1"');
---

<div class="row">
    <div class="col-12 col-md-10">
        <div class="markdown-content" set:html={parsedContent} />
    </div>
    <div class="col-12 col-md-2 toc">
        <div class="toc-content" set:html={tocContent} />
    </div>
</div>
