---
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';

interface Props {
    eventPath: string;
}

// Map of country codes to flags and names
const COUNTRIES: { flag: string; name: string }[] = [
    { flag: 'ðŸ‡¦ðŸ‡º', name: 'Australia' },
    { flag: 'ðŸ‡§ðŸ‡ª', name: 'Belgium' },
    { flag: 'ðŸ‡§ðŸ‡·', name: 'Brazil' },
    { flag: 'ðŸ‡¨ðŸ‡¦', name: 'Canada' },
    { flag: 'ðŸ‡¨ðŸ‡¿', name: 'Czech Republic' },
    { flag: 'ðŸ‡¨ðŸ‡´', name: 'Colombia' },
    { flag: 'ðŸ‡©ðŸ‡°', name: 'Denmark' },
    { flag: 'ðŸ‡ªðŸ‡¹', name: 'Ethiopia' },
    { flag: 'ðŸ‡«ðŸ‡·', name: 'France' },
    { flag: 'ðŸ‡©ðŸ‡ª', name: 'Germany' },
    { flag: 'ðŸ‡¬ðŸ‡­', name: 'Ghana' },
    { flag: 'ðŸ‡¬ðŸ‡·', name: 'Greece' },
    { flag: 'ðŸ‡®ðŸ‡³', name: 'India' },
    { flag: 'ðŸ‡®ðŸ‡¹', name: 'Italy' },
    { flag: 'ðŸ‡³ðŸ‡±', name: 'Netherlands' },
    { flag: 'ðŸ‡³ðŸ‡¿', name: 'New Zealand' },
    { flag: 'ðŸ‡µðŸ‡°', name: 'Pakistan' },
    { flag: 'ðŸ‡µðŸ‡±', name: 'Poland' },
    { flag: 'ðŸ‡¿ðŸ‡¦', name: 'South Africa' },
    { flag: 'ðŸ‡ªðŸ‡¸', name: 'Spain' },
    { flag: 'ðŸ‡¸ðŸ‡ª', name: 'Sweden' },
    { flag: 'ðŸ‡¨ðŸ‡­', name: 'Switzerland' },
    { flag: 'ðŸ‡¹ðŸ‡·', name: 'Turkey' },
    { flag: 'ðŸ‡¬ðŸ‡§', name: 'United Kingdom' },
    { flag: 'ðŸ‡ºðŸ‡¸', name: 'USA' },
];

const { eventPath } = Astro.props;

// Get all event pages
const allEvents = await getCollection('events');

// Filter for only the pages in the same directory as the current event
const locationPages = allEvents.filter((page) => {
    const pagePath = page.id.split('/');
    const eventPathParts = eventPath.split('/');

    // Remove the index.mdx from comparison
    if (pagePath[pagePath.length - 1] === 'index.mdx') {
        return false;
    }

    // Check if page is in the same directory
    return pagePath.slice(0, -1).join('/') === eventPathParts.join('/');
});

// Add country info from frontmatter
const locationsWithCountry = locationPages.map((page) => {
    const countryName = page.data.locations?.[0]?.country;
    // Find country code by matching country name
    const countryEntry = Object.entries(COUNTRIES).find(
        ([_, info]) => info.name.toLowerCase() === countryName?.toLowerCase(),
    );
    const country = countryEntry ? COUNTRIES[countryEntry[0]] : undefined;
    return {
        ...page,
        countryInfo: country,
    };
});
// Sort locations by country name
const sortedLocations = locationsWithCountry.sort((a, b) => {
    return a.countryInfo?.name?.localeCompare(b.countryInfo?.name);
});
---

<div class="table-responsive">
    <table class="table table-hover table-sm small">
        <thead>
            <tr>
                <th>Country</th>
                <th>City</th>
                <th>Location</th>
                <th>Event page</th>
            </tr>
        </thead>
        <tbody>
            {
                sortedLocations.map((page) => (
                    <tr class="position-relative">
                        <td class="text-nowrap">
                            {page.countryInfo?.flag} {page.countryInfo?.name}
                        </td>
                        <td class="text-nowrap">{page.data.locations?.[0]?.city}</td>
                        <td class="">{page.data.locations?.[0]?.name}</td>
                        <td class="text-nowrap">
                            <a class="stretched-link" href={`/events/${page.id.replace('.mdx', '')}`}>
                                Read more
                            </a>
                        </td>
                    </tr>
                ))
            }
        </tbody>
    </table>
</div>
